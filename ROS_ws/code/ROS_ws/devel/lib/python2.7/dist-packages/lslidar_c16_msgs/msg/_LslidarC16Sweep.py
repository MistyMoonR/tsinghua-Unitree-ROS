# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lslidar_c16_msgs/LslidarC16Sweep.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lslidar_c16_msgs.msg
import std_msgs.msg

class LslidarC16Sweep(genpy.Message):
  _md5sum = "e0395900ded93e728803e208b8b88005"
  _type = "lslidar_c16_msgs/LslidarC16Sweep"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# The 0th scan is at the bottom
LslidarC16Scan[16] scans

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: lslidar_c16_msgs/LslidarC16Scan
# Altitude of all the points within this scan
float64 altitude

# The valid points in this scan sorted by azimuth
# from 0 to 359.99
LslidarC16Point[] points

================================================================================
MSG: lslidar_c16_msgs/LslidarC16Point
# Time when the point is captured
float32 time

# Converted distance in the sensor frame
float64 x
float64 y
float64 z

# Raw measurement from Leishen C16
float64 azimuth
float64 distance
float64 intensity
"""
  __slots__ = ['header','scans']
  _slot_types = ['std_msgs/Header','lslidar_c16_msgs/LslidarC16Scan[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,scans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LslidarC16Sweep, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scans is None:
        self.scans = [lslidar_c16_msgs.msg.LslidarC16Scan() for _ in range(16)]
    else:
      self.header = std_msgs.msg.Header()
      self.scans = [lslidar_c16_msgs.msg.LslidarC16Scan() for _ in range(16)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.scans) != 16:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (16, len(self.scans), 'self.scans')))
      for val1 in self.scans:
        _x = val1.altitude
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_f6d().pack(_x.time, _x.x, _x.y, _x.z, _x.azimuth, _x.distance, _x.intensity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scans is None:
        self.scans = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      self.scans = []
      for i in range(0, 16):
        val1 = lslidar_c16_msgs.msg.LslidarC16Scan()
        start = end
        end += 8
        (val1.altitude,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = lslidar_c16_msgs.msg.LslidarC16Point()
          _x = val2
          start = end
          end += 52
          (_x.time, _x.x, _x.y, _x.z, _x.azimuth, _x.distance, _x.intensity,) = _get_struct_f6d().unpack(str[start:end])
          val1.points.append(val2)
        self.scans.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.scans) != 16:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (16, len(self.scans), 'self.scans')))
      for val1 in self.scans:
        _x = val1.altitude
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_f6d().pack(_x.time, _x.x, _x.y, _x.z, _x.azimuth, _x.distance, _x.intensity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scans is None:
        self.scans = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      self.scans = []
      for i in range(0, 16):
        val1 = lslidar_c16_msgs.msg.LslidarC16Scan()
        start = end
        end += 8
        (val1.altitude,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = lslidar_c16_msgs.msg.LslidarC16Point()
          _x = val2
          start = end
          end += 52
          (_x.time, _x.x, _x.y, _x.z, _x.azimuth, _x.distance, _x.intensity,) = _get_struct_f6d().unpack(str[start:end])
          val1.points.append(val2)
        self.scans.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f6d = None
def _get_struct_f6d():
    global _struct_f6d
    if _struct_f6d is None:
        _struct_f6d = struct.Struct("<f6d")
    return _struct_f6d
